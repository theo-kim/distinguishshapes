<style>
    th, td {
        font-weight:normal;
        padding:5px;
        width:auto;
        vertical-align:top;
    }
    th {
        background:#00B0F0;
    }
    tr + tr th, tbody th {
        background:#DAEEF3;
    }
    tr + tr, tbody {
        text-align:left
    }
    table, th, td {
        border:solid 1px;
        border-collapse:collapse;
        table-layout:fixed;
    }
    .userdata{
        display: none;
    }
    #newjson{
        width:100%;
    }
    .hidden{
        display: none;
    }

</style>
<script src="sort.js"></script>
<script src="jquery-3.1.0.min.js"></script>


<!--
redirect users to the https version of the website.
but: only check when on the production domain.
-->
<script type="text/javascript">
    var enforce = "konklone.io";
    if ((enforce == window.location.host) && (window.location.protocol != "https:"))
        window.location.protocol = "https";
</script>

<!-- jquery, jquery-csv,bootstrap -->
<script type='text/javascript' src='assets/jquery-2.1.1.min.js'></script>
<script src="assets/jquery.csv.js"></script>


<!-- site styles and JS -->
<script src="assets/site.js"></script>
<script src="assets/highlight.pack.js"></script>


<link href="assets/bootstrap.min.css" type="text/css" rel="stylesheet" />


<!-- site styles and JS -->
<link href="assets/site.css" type="text/css" rel="stylesheet" />
<link href="assets/github.css" type="text/css" rel="stylesheet" />




<!--<input value="Export as CSV 2" type="button" onclick="$('#example1').table2CSV({header:['prefix','Employee Name','Contact']})">-->
<h1>Full Table</h1>

<table id="example1">
    <thead>
    <tr>
        <th >Time</th>

        <th id="year0">Round1</th>
        <th id="year1">Round2</th>
        <th id="year2">Round3</th>
        <th id="year3">Round4</th>
        <th id="year4">Round5</th>
        <th id="year5">Round6</th>
        <th id="year6">Round7</th>
        <th id="year7">Round8</th>
        <th id="year8">Round9</th>
        <th id="year9">Round10</th>
        <th>Percent per click</th>
        <th>Age</th>
        <th>Gender</th>
        <th>Experience</th>
        <th>Has Retire Goal</th>
        <th>Total clicks</th>
        <th>Result Overall-Before Payment</th>
        <th>end time</th>
        <th>usercode</th>
        <th>city</th>
        <th>ip</th>
        <th>workid</th>
        <th>Result Overall-After Payment</th>
        <th>feedback</th>








    </tr>
    <tr>
        <th> Start time</th>

        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>

        <!--<th colspan="5">What they clicked</th>-->

        <!--<th>Category</th>-->
        <!--<th>AnnualFee</th>-->
        <!--<th>Price</th>-->
        <!--<th>One Year</th>-->
        <!--<th>Five Year</th>-->
        <th id="allocation0">Allocation of funds</th>
        <th>Return this year</th>


        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation1">Allocation of funds</th>
        <th>Return this year</th>


        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation2">Allocation of funds</th>
        <th>Return this year</th>


        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation3">Allocation of funds</th>
        <th>Return this year</th>
        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation4">Allocation of funds</th>
        <th>Return this year</th>
        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation5">Allocation of funds</th>
        <th>Return this year</th>
        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation6">Allocation of funds</th>
        <th>Return this year</th>
        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation7">Allocation of funds</th>
        <th>Return this year</th>
        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation8">Allocation of funds</th>
        <th>Return this year</th>
        <th>Round time(seconds)</th>
        <th>Filter Used</th>
        <th>Click times</th>
        <th >Category</th>
        <th>AnnalFee</th>
        <th>Price</th>
        <th>OneYear</th>
        <th>FiveYear</th>
        <th id="allocation9">Allocation of funds</th>
        <th>Return this year</th>
    </tr>
    </thead>
    <tbody id="tbody">

    </tbody>
</table>

<h1>Full JSON</h1>

<span class="editing">
            that's the whole data in JSON format.
    </span>
<textarea class="hljs json" id="newjson"></textarea>
{{#each result}}
    <div class = "userdata" style="width: 600%">
        {{this.data}}
    </div>
{{/each}}




<script>


    //function test() {


    let new_json = []
    document.querySelectorAll('.userdata').forEach((x,i)=>{
        if(1){
        console.log(x.innerHTML);

        let J_data = JSON.parse(x.innerHTML);
        let new_json_this={}

        let a = "<tr>";
        for (var year in J_data){
            //5round
            let yearcounter = year.toString()-2016, allo_counter=0;
            //let yearcounter = year.toString()-2021, allo_counter=0;


            new_json_this[year]={};

            if(year.toString()[0]=='2'){

           // let clicklist_str = J_data[year]['clicklist'].toString();
                function yesorno(x) {
                    if(x!=-1){return "Yes";}
                    else{ return "No";}
                }
                function howmany(array, what) {
                    var count = 0;
                    for (var i = 0; i < array.length; i++) {
                        if (array[i] === what) {
                            count++;
                        }
                    }
                    return count;
                }

                let allo_thisyear = "",allo_obj = J_data[year]['allocation'][yearcounter];
                //console.log(allo_obj);
                for (let key in allo_obj){
                    allo_counter++;
                    allo_thisyear += "<td>"+key+"\n"+"\n"+allo_obj[key]+"%"+"</td>"

                }
//                document.querySelector('#allocation'+(yearcounter-1)).colSpan = allo_counter.toString();
//                document.querySelector('#year'+(yearcounter-1)).colSpan = (allo_counter+7).toString();
                document.querySelector('#year'+(yearcounter-1)).colSpan = (9).toString();
                //let clicklist_str = "<td>"+"\n"+yesorno(J_data[year]['clicklist'].indexOf("category"))+"</td>"+"<td>"+"\n"+yesorno(J_data[year]['clicklist'].indexOf("af"))+"</td><td>"+"\n"+yesorno(J_data[year]['clicklist'].indexOf("prc"))+"</td><td>"+"\n"+yesorno(J_data[year]['clicklist'].indexOf("1y"))+"</td><td>"+"\n"+yesorno(J_data[year]['clicklist'].indexOf("5y"))+"</td>";
                let clicklist_str = "<td>"+"\n"+howmany(J_data[year]['clicklist'],"category")+"</td>"+"<td>"+"\n"+howmany(J_data[year]['clicklist'],"af")+"</td><td>"+"\n"+howmany(J_data[year]['clicklist'],"prc")+"</td><td>"+"\n"+howmany(J_data[year]['clicklist'],"1y")+"</td><td>"+"\n"+howmany(J_data[year]['clicklist'],"5y")+"</td>";

                a+='<td>'+J_data[year]['roundtime']+'</td>'+'<td>'+J_data[year]['filter_used']+'</td>'+'<td>'+J_data[year]['Times']+'</td>'+clicklist_str+'<td>'+JSON.stringify(J_data[year]['allocation'][yearcounter]).slice(1,-1)+'</td>'+'<td>'+J_data[year]['revenue']+'</td>'
//                a+='<td>'+J_data[year]['Times']+'</td>'+clicklist_str+allo_thisyear+'<td>'+J_data[year]['revenue']+'</td>'
                new_json_this[year]['filter_used']=J_data[year]['filter_used'];
                new_json_this[year]['roundtime']=J_data[year]['roundtime'];
                new_json_this[year]['clicktimes']=J_data[year]['Times'];
                new_json_this[year]['Category']=howmany(J_data[year]['clicklist'],("category"))
                new_json_this[year]['AnnualFee']=howmany(J_data[year]['clicklist'],("af"))
                new_json_this[year]['Price']=howmany(J_data[year]['clicklist'],("prc"))
                new_json_this[year]['oneyear']=howmany(J_data[year]['clicklist'],("1y"))
                new_json_this[year]['fiveyear']=howmany(J_data[year]['clicklist'],("5y"))
                new_json_this[year]['allocation']=JSON.stringify(J_data[year]['allocation'][yearcounter]).slice(1,-1);
                new_json_this[year]['return']=J_data[year]['revenue'];


            } else{
                if(J_data[year]!="not sure"){
                a+='<td>'+J_data[year]+'</td>'
                    new_json_this[year] = J_data[year];
                }



            }}
            new_json.push(new_json_this);

        a+='</tr>';
        document.querySelector('#tbody').innerHTML+=a;

        }})

    document.querySelector('#newjson').innerHTML=JSON.stringify(new_json);
    //console.log(JSON.stringify(new_json))

    //}



    function init() {
        let req= new XMLHttpRequest();
        req.open('POST', '/givebonus', true);
        req.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
        req.send("data="+JSON.stringify(new_json));
    }






    var excerptRows = 7;
    var input;
    var url;
    var lastSaved;

    // function log(msg) {
    //   return $(".console").removeClass("error").html(msg);
    // }

    // function error(msg) {
    //   return log(msg).addClass("error");
    // }

//    var json = jsonFrom(JSON.stringify(new_json));
//    doCSV(json);

    function doJSON() {
        // just in case
        $(".drop").hide();

        // get input JSON, try to parse it

       // $(".json textarea").placeholder= new_json;

//        var newInput = $(".json textarea").val();
//        //var newInput = JSON.parse(document.querySelector('#newjson').innerHTML);
//        if (newInput == input) return;
//
//        input = newInput;
//        if (!input) {
//            // wipe the rendered version too
//            $(".json code").text("");
//            return;
//        }

        //var json = jsonFrom(input);
        var json = jsonFrom(JSON.stringify(new_json));

        // if succeeded, prettify and highlight it
        // highlight shows when textarea loses focus
        if (json) {
            // Reset any error message from previous failed parses.
            $("div.error").hide();
            $("div.warning").show();

            var pretty = JSON.stringify(json, undefined, 2);
            $(".json code").text(pretty);
            if (pretty.length < (50 * 1024))
                hljs.highlightBlock($(".json code").get(0));

            // convert to CSV, make available
            doCSV(json);

        } else {
            // Show error.
            $("div.warning").hide();
            $("div.error").show();
            $(".json code").text("");
        }

        // Either way, update the error-reporting link to include the latest.
        setErrorReporting(null, input);

        return true;
    }


    // show rendered JSON
    function showJSON(rendered) {
        console.log("ordered to show JSON: " + rendered);
        if (rendered) {
            if ($(".json code").text()) {
                console.log("there's code to show, showing...");
                $(".json .rendered").show();
                $(".json .editing").hide();
            }
        } else {
            $(".json .rendered").hide();
            $(".json .editing").show().focus();
        }
    }

    function showCSV(rendered) {
        if (rendered) {
            if ($(".csv table").text()) {
                $(".csv .rendered").show();
                $(".csv .editing").hide();
            }
        } else {
            $(".csv .rendered").hide();
            $(".csv .editing").show().focus();
        }
    }

    // takes an array of flat JSON objects, converts them to arrays
    // renders them into a small table as an example
    function renderCSV(objects) {
        var rows = $.csv.fromObjects(objects, {justArrays: true});
        if (rows.length < 1) return;

        // find CSV table
        var table = $(".csv table")[0];
        $(table).text("");

        // render header row
        var thead = document.createElement("thead");
        var tr = document.createElement("tr");
        var header = rows[0];
        for (field in header) {
            var th = document.createElement("th");
            $(th).text(header[field])
            tr.appendChild(th);
        }
        thead.appendChild(tr);

        // render body of table
        var tbody = document.createElement("tbody");
        for (var i=1; i<rows.length; i++) {
            tr = document.createElement("tr");
            for (field in rows[i]) {
                var td = document.createElement("td");
                $(td)
                        .text(rows[i][field])
                        .attr("title", rows[i][field]);
                tr.appendChild(td);
            }
            tbody.appendChild(tr);
        }

        table.appendChild(thead);
        table.appendChild(tbody);
    }

    function doCSV(json) {
        // 1) find the primary array to iterate over
        // 2) for each item in that array, recursively flatten it into a tabular object
        // 3) turn that tabular object into a CSV row using jquery-csv
        var inArray = arrayFrom(json);

        var outArray = [];
        for (var row in inArray)
            outArray[outArray.length] = parse_object(inArray[row]);

        $("span.rows.count").text("" + outArray.length);

        var csv = $.csv.fromObjects(outArray);
        // excerpt and render first 10 rows
        renderCSV(outArray.slice(0, excerptRows));
        showCSV(true);

        // show raw data if people really want it
        $(".csv textarea").val(csv);

        // download link to entire CSV as data
        // thanks to https://jsfiddle.net/terryyounghk/KPEGU/
        // and https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side
        var uri = "data:text/csv;charset=utf-8," + encodeURIComponent(csv);
        $(".csv a.download").attr("href", uri);
    }

    // loads original pasted JSON from textarea, saves to anonymous gist
    // rate-limiting means this could easily fail with a 403.
    function saveJSON() {
        if (!input) return false;
        if (input == lastSaved) return false;

        // save a permalink to an anonymous gist
        var gist = {
            description: "test",
            public: false,
            files: {
                "source.json": {
                    "content": input
                }
            }
        };

        // TODO: show spinner/msg while this happens

        console.log("Saving to an anonymous gist...");
        $.post(
                'https://api.github.com/gists',
                JSON.stringify(gist)
        ).done(function(data, status, xhr) {

            // take new Gist id, make permalink
            setPermalink(data.id);

            // send analytics event
            Events.permalink();

            // mark what we last saved
            lastSaved = input;

            // update error-reporting link, including permalink
            setErrorReporting(data.id, input);

            console.log("Remaining this hour: " + xhr.getResponseHeader("X-RateLimit-Remaining"));

        }).fail(function(xhr, status, errorThrown) {
            console.log(xhr);

            // send analytics event
            Events.permalink_error(status);

            // TODO: gracefully handle rate limit errors
            // if (status == 403)

            // TODO: show when saving will be available
            // e.g. "try again in 5 minutes"
            // var reset = xhr.getResponseHeader("X-RateLimit-Reset");
            // var date = new Date();
            // date.setTime(parseInt(reset) * 1000);
            // use http://momentjs.com/ to say "in _ minutes"

        });

        return false;
    }

    // Updates the error-reporting link to include current details.
    //
    // If the passed-in `id` is not null, a permalink is included.
    // If the passed-in `id` is null, then no permalink is included.
    // (Needed explicitly because the current URL doesn't always refer
    // to a permalink related to the current value of the textarea.)
    //
    // The current body of the textarea will be encoded into the URI,
    // to pre-populate the GitHub issue template, but only if the body
    // is < 7KB (7,168). GitHub's nginx server rejects query strings
    // longer than ~8KB.
    //
    // If no `id` is given, and content is too long, the URL will
    // encode only a title, and no body.
    function setErrorReporting(id, content) {
        var base = "https://github.com/konklone/json/issues/new";

        var title = "Error parsing some specific JSON";

        var body = "I'm having an issue converting this JSON:\n\n";
        if (id) body += (
                window.location.protocol + "//" +
                window.location.host + window.location.pathname +
                "?id=" + id + "\n\n"
        );

        if (content.length <= (7 * 1024))
            body += ("```json\n" + content + "\n```");

        var finalUrl = base + "?title=" + encodeURIComponent(title) +
                "&body=" + encodeURIComponent(body);

        $(".error a.report").attr("href", finalUrl);

        // console.log("Updated error reporting link to:" + finalUrl);
        return true;
    }

    // given a valid gist ID, set the permalink to use it
    function setPermalink(id) {
        if (history && history.pushState)
            history.pushState({id: id}, null, "?id=" + id);

        // log("Permalink created! (Copy from the location bar.)")
    }

    // check query string for gist ID
    function loadPermalink() {
        var id = getParam("id");
        if (!id) return;

        $.get('https://api.github.com/gists/' + id,
                function(data, status, xhr) {
                    console.log("Remaining this hour: " + xhr.getResponseHeader("X-RateLimit-Remaining"));

                    var input = data.files["source.json"].content;
                    $(".json textarea").val(input);
                    doJSON();
                    showJSON(true);
                }
        ).fail(function(xhr, status, errorThrown) {
            console.log("Error fetching anonymous gist!");
            console.log(xhr);
            console.log(status);
            console.log(errorThrown);
        });
    }

    $(function() {

        $(".json textarea").blur(function() {showJSON(true);});
        $(".json pre").click(function() {showJSON(false)});
        $(".csv textarea").blur(function() {showCSV(true);})
        $(".csv .raw").click(function() {
            showCSV(false);
            $(".csv textarea").focus().select();
            return false;
        })

        // if there's no CSV to download, don't download anything.
        // also, log an analytics event.
        $(".csv a.download").click(function() {
            var data = $(".csv textarea").val();
            if (data) {
                Events.download(data.length);
                return true;
            } else
                return false;
        });

        // Both elements are present on page-load, so use normal click handler.
        $(".save a, .error a.save").click(saveJSON);

        // transform the JSON whenever it's pasted/edited

//        $(".json textarea")
//                .on('paste', function() {
//                    // delay the showing so the paste is pasted by then
//                    setTimeout(function() {
//                        doJSON();
//                        $(".json textarea").blur();
//                    }, 1);
//                })
//                .keyup(function(){
//                    doJSON();
//                }); // harmless to repeat doJSON


        $("#convert").click(function () {
            doJSON();
        });


        // go away
        $("body").click(function() {
            $(".drop").hide();
        });

        $(document)
                .on("dragenter", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    $(".drop").show();
                })
                .on("dragover", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                })
                .on("dragend", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    $(".drop").hide();
                })
                .on("drop", function(e) {
                    $(".drop").hide();

                    if (e.originalEvent.dataTransfer) {
                        if (e.originalEvent.dataTransfer.files.length) {
                            e.preventDefault();
                            e.stopPropagation();

                            var reader = new FileReader();

                            reader.onload = function(ev) {
                                console.log(ev.target.result);
                                $(".json textarea").val(ev.target.result);

                                setTimeout(function() {
                                    doJSON();
                                    $(".json textarea").blur();
                                }, 1);
                            }

                            reader.readAsText(e.originalEvent.dataTransfer.files[0]);
                        }
                    }
                });

        // highlight CSV on click
        $(".csv textarea").click(function() {$(this).focus().select();});

        loadPermalink();
    });
</script>

</head>
<body>

<h1>Convert JSON to CSV</h1>
<button id="convert">Click to convert</button>
<section class="json hidden">

    <p >
    <span class="instruction editing">
      Paste the JSON above or part of it here.
    </span>

        <span class="instruction rendered">
      Click your JSON below to edit.
    </span>

        <span class="save">
      <a href="#">Create a permalink</a> any time.
    </span>




    </p>

    <div class="areas">
        <textarea class="editing"></textarea>
        <pre class="rendered"><code></code></pre>
        <div class="drop">DROP JSON HERE</div>
    </div>

    <div class="warning">
        Extremely large files may cause trouble &mdash; the conversion is done inside your browser.
    </div>

    <div class="error">
        There was an error parsing this JSON. If you're sure this JSON is valid, please
        <a class="report" target="_blank"
           href="https://github.com/konklone/json/issues/new">
            file an issue</a>.
        You can
        <a class="save" href="#">create a permalink to the error</a>
        any time.
    </div>
</section>

<section class="csv">

    <p>
    <span class="rendered">
      Below are the first few rows (<span class="rows count"></span> total).

      <a download="result.csv" href="#" class="download">
        Download the entire CSV</a>,

      or <a href="#" class="raw">show the raw data</a>.
    </span>

        <span class="editing">
            JSON will appear below as a table.
    </span>
    </p>

    <div class="areas">
        <textarea class="editing" readonly></textarea>
        <div class="table rendered">
            <table></table>
        </div>
    </div>
</section>

<!--<footer>-->
    <!--<p>-->
        <!--Thanks to <a href="https://twitter.com/benbalter">@benbalter</a> for help, and to <a href="https://twitter.com/onyxfish">@onyxfish</a> for the amazing <a href="https://csvkit.readthedocs.org/en/latest/scripts/in2csv.html">csvkit</a>.-->
    <!--</p>-->
<!--</footer>-->

<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-252618-16', 'konklone.io');
    ga('set', 'forceSSL', true);
    ga('set', 'anonymizeIp', true);
    ga('send', 'pageview');
</script>
<h1>Grant bonus</h1>
<span>Below are those who has been bonused already</span>
<textarea style="width: 100%">
{{result1}}
</textarea>
<button onclick="init()">Click to bonus</button>