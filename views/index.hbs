<!--<img src="/assets/shapesvg/logo.png" alt="" />-->
<!--<img src="http://placehold.it/450x200?text=1" alt="" />-->
<head>
    <script src="jquery-3.1.0.min.js"></script>
    <script type="text/javascript" src="table2cvs.js"></script>
    <script src="bootstrap-3.3.7-dist/js/bootstrap.min.js"></script>
    <script src="bootstrap-3.3.7-dist/bootbox.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" rel="stylesheet" media="all">
    <link rel="stylesheet" href="bootstrap-3.3.7-dist/css/bootstrap-theme.min.css">
    <!--<link rel="stylesheet" href="bootstrap-3.3.7-dist/css/bootstrap.min.css">-->
    <link rel="stylesheet" href="style.css">
</head>
<div id="data" class="hidden">
    {{result}}
</div>
<style>
    .hidden{
        display: none;
    }
    .button {
        width: 20vmax;
        color: black;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        cursor: pointer;
    }

    .list-compvare {
        display: flex;
        width: 100%;
        flex-direction: row;
        flex-wrap: wrap;
    }
    p{
        margin-left: 10%;
        margin-right:10%;
        font-family: 'Roboto', sans-serif;
    }
    #next{

        display: none;
        /*margin-left: 10vmax;*/
        /*margin-right: 10vmax;*/

        float: right;

    }
    .list-compvare-item {
        transition: transform 0.1s;
        flex: 1 1 7.5%;
        height: 60px;
        padding: 1vmax;
        /*   display: inline-block;
          margin-right: 10px; */
    }
    .list-compvare-img {
        object-fit: cover;
        height: 100%;
        width: auto;
        background-size: 25px 35px;
    }
    .list-compvare-enter, .list-compvare-leave-to
        /* .list-compvare-leave-active for <2.1.8 */ {
        opacity: 0;
        transform: translateY(30px);
    }
    .list-compvare-leave-active {
        position: absolute;
    }
    #btns1{
        float: right;
        width: 300px;
        height: auto;
        padding: 10px;
        align-content: center;
    }
    #list-compvare-demo{
        margin: 3vmax;
    }
    .hidden{
        display: none;
    }
    .button_1{
        margin-top: -1.5vmax;

    }
    .button_2{
        margin-top: 1.4vmax;
    }

</style>
<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.2.1.min.js"></script>
<script src="https://unpkg.com/vue@2.1.10/dist/vue.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js"></script>
<script src="bootstrap-3.3.7-dist/js/bootstrap.min.js"></script>
<script src="bootstrap-3.3.7-dist/bootbox.min.js"></script>

<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<link rel="stylesheet" href="bootstrap-3.3.7-dist/css/bootstrap-theme.min.css">


<div id="list-compvare-demo" class="demo">
    <p id="info">
        You have 5 minutes to record the choice by clicking either the HEXAGON button or NANOGONS button. You can switch between choices as many time as you want, and your choice at the end of the 5 minutes will be recorded. KEEP IN MIND: because of technical problems, the system sometime gets “stuck” such that you won’t be able to change your preferred choice – so always keep your most up-to-date preferred choice on.
    </p>
    <p style="display: block">
    </p>


    <div id="btns">
    <div style="float: right;margin-right:8vmax;">
        <p><button id="demo" style="cursor: inherit;display: block;float: right " class="button button_1 btns" id="time"></button></p>
        <p><button style="display: none;float: right " v-on:click="shuffle" class="button button_2" id="next">Next Round</button></p>

    </div>
        <p><button id="btn1" class="b1 btns button hidden" onclick="btn1click()"></button></p>
        <p> <button id="btn2" class="b2 btns button hidden" onclick="btn2click()"></button></p>
        <p> <button id="btn3" class="b3 btns button hidden" onclick="btn3click()"></button></p>
        <p> <button id="btn4" class="b4 btns button hidden" onclick="btn4click()"></button></p>
        <p> <button id="btn5" class="b5 btns button hidden" onclick="btn5click()"></button>
        </p>



    </div>

    <!--<button v-on:click="filter('all')">All</button>-->
    <!--<button v-on:click="filter('tag1')">Tag 1</button>-->
    <!--<button v-on:click="filter('tag2')">Tag 2</button>-->
    <transition-group name="list-compvare"
                      class="list-compvare"      tag="section">
        <div
                v-for="item in filteredItems"
                v-bind:key="item.id"
                class="list-compvare-item"
        >
            <!--flex: 1 1 7.5%;-->

            <!--<img class="list-compvare-img" :src="'http://placehold.it/450x200?text='+item.id" alt="" />-->
            <img v-bind:style="{height:item.tags[4]+'px',transform: 'rotate('+item.tags[3]+'deg)'}" class="list-compvare-img" :src="'/assets/shapesvg/'+item.tags[0]+'.svg'" alt="" />
            </span>
    </transition-group>
</div>
<script>
    document.querySelector('body').style.backgroundColor = 'white';
    var explanation = {'pentagon':'five-sided','hexagon':'six-sided','heptagon':'seven-sided','octagon':'eight-sided','nonagon':'nine-sided','decagon':'ten-sided'}
    var click_everysecond = ['null'];
    var user_data = {};
    var user_id = guid();
    var ip = "unknown", city = "unknown";
    var posneg = [-1,1];
    //var delta_list = [];
//    for(var i=0;i<10;i++){
//        delta_list.push(posneg[Math.floor(Math.random() * 2)])
//    }
    $.getJSON('//freegeoip.net/json/?callback=?', function (data) {
        ip = data.ip;
        city = data.country_name+ "\n" + data.region_name + "\n" + data.city;
        user_data["user_city"] = city;
        user_data["user_ip"] = ip;
    });
    var data = (document.querySelector('#data')).innerHTML;
    var start = data.indexOf('data');
    var data1 = JSON.parse((data.slice(start+7,-14)));
    console.log((data1));
//    there's proportion object, so not useful var choicelist = data1.choicelist;
    var choicelist = data1.choicelist;
    var proportion = data1.proportion;
    var userchoices = data1.userchoices;
    var decoys = choicelist.filter(x=>{return userchoices.indexOf(x+'_c')==-1});
    var deltalist = data1.deltalist;
    var deltalist_10 = [];
    //console.log(decoys);
//    for(var i=0;i<10;i++){
//        var obj = {};
//        var random = getRandomInt(1,userchoices.length+1);
//        for(var m=0;m<deltalist.length;m++){
//            obj[(userchoices[(random+m)%(userchoices.length)]).slice(0,-2)] = deltalist[m];
//        }
//        deltalist_10.push(obj);
//    }
    for(var i=0;i<10;i++){
        //datalist[max,mudding]
        var mudding = getRandomInt(-parseInt(deltalist[1]),parseInt(deltalist[1]));
        var obj = {};
        var random = getRandomInt(0,userchoices.length);
        for(var m=0;m<userchoices.length;m++){
            obj[(userchoices[m]).slice(0,-2)] = parseInt(mudding);
        }
        obj[(userchoices[random]).slice(0,-2)] += parseInt(deltalist[0]);
        //decoys
        for(var m=0;m<decoys.length;m++) {
            obj[decoys[m]] = -parseInt((mudding*userchoices.length + parseInt(deltalist[0]))/decoys.length)-1;
        }
        obj[decoys[0]] +=1;

        deltalist_10.push(obj);
    }
    survey(user_data);

    var choice_second = 'null',answer = getAnswer(0);

    var minutes1 = Math.floor((data1.roundtime / (60)));
    var seconds1 = Math.floor((data1.roundtime % (60)));
    var rdtime = "";

    if (minutes1==0){
        rdtime = seconds1+' second(s) ';
    }else {
        rdtime = minutes1+' minute(s) '+seconds1+' second(s) '
    }
    function getAnswer(rd) {
        console.log("deltalist_10",deltalist_10);

        var numbig = 0;
        var as = userchoices[0];

        for (var key in proportion){
            var num = parseInt(proportion[key]);
            if((deltalist_10[rd])[key]!=undefined){
                num+=parseInt((deltalist_10[rd])[key]);
            }
            if(num>numbig){
                numbig = num;
                as = key;
            }
        }
        console.log("answer is",answer);
        return as;

//        userchoices.forEach(x=> {
//            //if(proportion[x.slice(0,-2)]+delta_list[rd]*delta>proportion[as.slice(0,-2)]+delta_list[rd]*delta*(-1)){
//            if(proportion[x.slice(0,-2)]>proportion[as.slice(0,-2)]){
//                as = x;
//            }
//                }
//        )
////        if(proportion[userchoices[0].slice(0,-2)]+delta_list[rd]*delta>proportion[userchoices[1].slice(0,-2)]+delta_list[rd]*delta*(-1)){
////            return userchoices[0];
////        }else {
////            return userchoices[1];
////        }
//        return as;
    }
    function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive
    }
    function init() {

        document.querySelector('#info').innerHTML="        You have "+rdtime+"to record the choice by clicking either the "+userchoices[0].slice(0,-2)+' (a '+explanation[userchoices[0].slice(0,-2)]+' shape)'+" button or "+userchoices[1].slice(0,-2)+' (a '+explanation[userchoices[1].slice(0,-2)]+' shape)'+" button. You can switch between choices as many time as you want, and your choice at the end of the "+rdtime+" will be recorded. KEEP IN MIND: because of technical problems, the system sometime gets “stuck” such that you won’t be able to change your preferred choice – so always keep your most up-to-date preferred choice on."
        console.log((proportion));
        userchoices.forEach((x,i)=>{
                    document.querySelector('#btn'+(i+1)).innerHTML=x.slice(0,-2)+' ('+explanation[x.slice(0,-2)]+')';
                    document.querySelector('#btn'+(i+1)).classList.remove('hidden');
        }
        )

        var vuelist = [];
        var counter1 = 0;
        console.log(data1)
        makeShapes(proportion,vuelist,counter1,0)
        function makeShapes(proportion,vuelist,counter1,rd) {
            var sz = data1.size;
            var szlist= [];
            for (var i = 0; i<parseInt(parseInt(sz.small)/10); i++){
                szlist.push(80);
            }
            for (var i = 0; i<parseInt(parseInt(sz.normal)/10); i++){
                szlist.push(100);
            }
            for (var i = 0; i<parseInt(parseInt(sz.big)/10); i++){
                szlist.push(120);
            }
            //console.log('sz',szlist);
            for (var key in proportion){
                var num = parseInt(proportion[key]);
                if((deltalist_10[rd])[key]!=undefined){
                    num+=parseInt((deltalist_10[rd])[key]);
                }
//                if(key==userchoices[0].slice(0,-2)){
//                    //num+=delta_list[rd]*delta
//                }
//                else if(key==userchoices[1].slice(0,-2)){
//                    //num-=delta_list[rd]*delta
//                }
                console.log("key",key,num);
                for (var p = 0;p<num;p++){
                    var ob = {id:counter1+p,tags:[key,'all', 'tag2',(data1.degree)[Math.floor(Math.random() * 4)],szlist[getRandomInt(0,10)]*0.6]};
                    vuelist.push(ob);
                }
                counter1+=num;
            }
        }
        //console.log(vuelist)


        var vue = new Vue({
            el: '#list-compvare-demo',
            data: {
                items: shuffleArray(vuelist),
                currentTag: 'all'
            },
            computed: {
                filteredItems: function() {
                    var filter = this.currentTag;
                    return this.items.filter(function(item) {
                        return item.tags.indexOf(filter) !== -1;
                    });
                }
            },
            methods: {
                shuffle: function () {
                    this.items = _.shuffle(this.items)
                },
                filter: function(tag) {
                    this.currentTag = tag;
                }
            }
        })

//        window.setInterval(function(){
//            /// call your function here
//
//        }, 1000);

        var currentdate = new Date();
        var datetime = currentdate.getDate() + "/"
                + (currentdate.getMonth()+1)  + "/"
                + currentdate.getFullYear() + " - "
                + (currentdate.getUTCHours()) + ":"
                + currentdate.getMinutes() + ":"
                + currentdate.getSeconds();



        var roundcounter = 1;

        user_data["usercode"] = user_id;
        user_data["date/time"] = datetime;
        user_data["Roundtime"] = data1.roundtime;
        user_data["user_city"] = city;
        user_data["user_ip"] = ip;
        user_data["workid"] = "not available";
        user_data["degree_tilted"] = data1.degree;

        user_data["deltalist"] = deltalist;

        console.log(deltalist_10);

//        var deltalist = delta_list.map(x=>{
//            if(x==(-1)){
//                return userchoices[1].slice(0,-2);
//            }
//            else{
//                return userchoices[0].slice(0,-2);
//            }
//        });
        var list_deltas = [];
        deltalist_10.forEach((x,i)=>{

            for(var key in x){
                list_deltas.push("round "+(i+1)+" "+key+":"+x[key]);
            }
        })
        user_data["Delta added on(shape) /round"] = list_deltas;

        window.setTimeout(function(){
            /// call your function here
            user_data['click_everysecond'] = click_everysecond;

            var req= new XMLHttpRequest();
            req.open('POST', '/userdata', true);
            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
            req.send("user=" + user_id + "&data="+JSON.stringify(user_data));

        }, data1.roundtime*10);


        // Set the date we're counting down to
        var countDownDate = data1.roundtime;
        var countadder = 0;
        // Update the count down every 1 second

        var distance = 0;
        document.querySelector('#next').addEventListener('click',function () {
            choice_second = 'null';
            countadder = 0;
            document.querySelector('#next').style.display='none';
            document.getElementById("btn2").style.background='buttonface';
            document.getElementById("btn1").style.background='buttonface';
            document.getElementById("btn3").style.background='buttonface';
            document.getElementById("btn4").style.background='buttonface';
            document.getElementById("btn5").style.background='buttonface';
        })

        var x = setInterval(function() {

            countadder++;
            distance = countDownDate - countadder;

            // Get todays date and time

            // Find the distance between now an the count down date

            // Time calculations for days, hours, minutes and seconds
            //var days = Math.floor(distance / (1000 * 60 * 60 * 24));
//        var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            var minutes = Math.floor((distance / (60)));
            var seconds = Math.floor((distance % (60)));

            // Display the result in the element with id="demo"
            document.getElementById("demo").innerHTML = "Time remaining: "+minutes + "m " + seconds + "s ";


            // If the count down is finished, write some text
            if(distance>0){
                click_everysecond.push(choice_second);
                //choice_second = 'null';
                user_data['click_everysecond'] = click_everysecond;

                var req= new XMLHttpRequest();
                req.open('POST', '/userdata', true);
                req.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
                req.send("user=" + user_id + "&data="+JSON.stringify(user_data));


            }
            if (distance == 0) {
                var vuelist = [];
                var counter1 = 0;
                makeShapes(proportion,vuelist,counter1,roundcounter)
                answer = getAnswer(roundcounter);
                roundcounter++;
                user_data["RoundCounter"] = roundcounter;
                //vue.shuffle();
                //clearInterval(x);
                document.querySelector('#next').style.display='block';

                if (roundcounter==10){
                    clearInterval(x);
                    document.getElementById("demo").innerHTML = "EXPIRED";
                }

            }if(distance<0){
                document.getElementById("demo").innerHTML = "EXPIRED";

            }
        }, 1000);
    }
    function btn1click() {
        document.getElementById("btn1").style.background='lightgrey';
        document.getElementById("btn2").style.background='buttonface';
        document.getElementById("btn3").style.background='buttonface';
        document.getElementById("btn4").style.background='buttonface';
        document.getElementById("btn5").style.background='buttonface';

        if(answer==userchoices[0].slice(0,-2)){
            choice_second = "true";
        }else {
            choice_second = "false";
        }
        //choice_second = userchoices[0].slice(0,-2);
    }
    function btn2click() {
        document.getElementById("btn2").style.background='lightgrey';
        document.getElementById("btn1").style.background='buttonface';
        document.getElementById("btn3").style.background='buttonface';
        document.getElementById("btn4").style.background='buttonface';
        document.getElementById("btn5").style.background='buttonface';

        if(answer==userchoices[1].slice(0,-2)){
            choice_second = "true";
        }else {
            choice_second = "false";
        }
        //choice_second = userchoices[1].slice(0,-2);
    }
    function btn3click() {
        document.getElementById("btn3").style.background='lightgrey';
        document.getElementById("btn1").style.background='buttonface';
        document.getElementById("btn2").style.background='buttonface';
        document.getElementById("btn4").style.background='buttonface';
        document.getElementById("btn5").style.background='buttonface';

        if(answer==userchoices[2].slice(0,-2)){
            choice_second = "true";
        }else {
            choice_second = "false";
        }
        //choice_second = userchoices[1].slice(0,-2);
    }
    function btn4click() {
        document.getElementById("btn4").style.background='lightgrey';
        document.getElementById("btn1").style.background='buttonface';
        document.getElementById("btn3").style.background='buttonface';
        document.getElementById("btn2").style.background='buttonface';
        document.getElementById("btn5").style.background='buttonface';
        if(answer==userchoices[3].slice(0,-2)){
            choice_second = "true";
        }else {
            choice_second = "false";
        }
        //choice_second = userchoices[1].slice(0,-2);
    }
    function btn5click() {
        document.getElementById("btn5").style.background='lightgrey';
        document.getElementById("btn1").style.background='buttonface';
        document.getElementById("btn3").style.background='buttonface';
        document.getElementById("btn4").style.background='buttonface';
        document.getElementById("btn2").style.background='buttonface';

        if(answer==userchoices[4].slice(0,-2)){
            choice_second = "true";
        }else {
            choice_second = "false";
        }
        //choice_second = userchoices[1].slice(0,-2);
    }

    function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
            var j = Math.floor(Math.random() * (i + 1));
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        }
        return array;
    }
    function guid() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
        }

        return s4() + s4() + s4();

    }
    function survey(user_data) {
        //            message: '<form action="/action_page.php">First name:<br> <input type="text" name="firstname" value="Mickey"> <br>Last name:<br> <input type="text" name="lastname" value="Mouse"> <br><br> <input type="submit" value="Submit"> </form> ',

        var dialog = bootbox.dialog({
            closeButton: false,
            title: 'Please tell us about yourself:',
            message: '<form id="survey" action="/action_page.php">Age:<br> <input type="text" id="age" name="age" value=""> <br><br>Sex:<br>  <input type="radio" name="gender" id="gender" value="male" > Male<br> <input type="radio" name="gender" value="female"> Female<br> <input type="radio" name="gender" value="other"> Other  <br> <br><input id="submitsurvey" class="btn btn-default" type="submit" value="Submit"> </form> ',
        });
        dialog.init(function(){
            var a = document.querySelector("#submitsurvey")
            a.addEventListener('click',function(evt){
                evt.preventDefault();
                var form_obj = ($('#survey').serializeArray())
                form_obj.forEach(x=>{
                    user_data[x.name] = x.value;
                })
                dialog.modal('hide');
                init();
            });
        });
    }
    //init();

    //
//        var vuelist = [{ id: 1, tags: ['all', 'tag1'] },
//        { id: 2, tags: ['all', 'tag2'] },
//        { id: 3, tags: ['all', 'tag2'] },
//        { id: 4, tags: ['all', 'tag1'] },
//        { id: 5, tags: ['all', 'tag1'] },
//        { id: 6, tags: ['all', 'tag2'] },
//        { id: 7, tags: ['all', 'tag1'] },
//        { id: 8, tags: ['all', 'tag2'] },
//        { id: 9, tags: ['all', 'tag2'] }];


</script>
